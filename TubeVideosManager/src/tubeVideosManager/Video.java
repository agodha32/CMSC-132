package tubeVideosManager;

import java.util.ArrayList;

/**
 * A video has a title, url, durationInMinutes and a genre. Comments about the
 * video are kept in an ArrayList (comments). For YouTube videos the url is the
 * one generated by the "Copy embed code" option.
 * 
 * @author UMCP CS Department
 *
 */
public class Video implements Comparable<Video> {
	private String title, url;
	private int durationInMinutes;
	private Genre videoGenre;
	private ArrayList<String> comments;

	/**
	 * Initializes a video object. If any parameter is null or if a string parameter
	 * is a blank (according to String class isBlank() method), the method will
	 * throw an IllegalArgumentException (with any message) and perform no
	 * processing. Also the same exception will be thrown if the duration is zero or
	 * negative.
	 * 
	 * @param title
	 * @param url
	 * @param durationInMinutes
	 * @param videoGenre
	 *
	 */
	
	public Video(String title, String url, int durationInMinutes, Genre videoGenre) {
		//check if all parameters are valid
		if(title.isBlank() || title == null || url.isBlank() || url == null || 
				videoGenre == null|| durationInMinutes <= 0) {
			
			throw new IllegalArgumentException ();
			
		}
		
		this.title = title; // sets the title of the new video
		this.url = url; // sets the url link of the new video
		this.durationInMinutes = durationInMinutes; // sets the duration of the new video
		this.videoGenre = videoGenre; // sets the genre of the new video
		this.comments = new ArrayList<String>(); // creates a list of comments
		
	}
	
	

	/**
	 * Initializes the Video object so changes to the parameter do not affect the
	 * current object. Your implementation must be efficient (avoid any unnecessary
	 * copies).
	 * 
	 * @param video
	 */
	public Video(Video video) {

		this.title = video.title; //sets the title of the new video
		this.url = video.url; // sets the link of the new video
		this.durationInMinutes = video.durationInMinutes; // sets the length of the new video
		this.videoGenre = video.videoGenre; // sets the genre of the new video
		this.comments = new ArrayList<String>(); // creates a new list to avoid privacy leakes
		
		for(String comment : video.comments) {
			//adding each comment to the new ArrayList
			this.comments.add(comment);
			
		}
		
	}

	/*
	 * Get method for title
	 * 
	 * @return title string
	 */
	public String getTitle() {
		
		return this.title; // returns the title as a string
	
	}

	/**
	 * Get method for url
	 * 
	 * @return url string
	 */
	public String getUrl() {
		
		return this.url; // returns the link as a string
		
	}

	/**
	 * Get method for duration
	 * 
	 * @return duration
	 */
	public int getDurationInMinutes() {
		
		return this.durationInMinutes; // returns the duration of the video
	
	}

	/**
	 * Get method for video genre
	 * 
	 * @return string with genre
	 */
	public Genre getGenre() {

		return this.videoGenre; // returns the genre for the video as a string
	
	}

	/**
	 * Provided; please don't modify. toString for class
	 * 
	 * @return string with object info
	 */
	public String toString() {
		String answer = "Title: " + "\"" + title + "\"\n";

		answer += "Url: " + url + "\n";
		answer += "Duration (minutes): " + durationInMinutes + "\n";
		answer += "Genre: " + videoGenre + "\n";

		return answer;
	}

	/**
	 * Adds specified comments to the video. If the parameter is null or is a blank
	 * string (according to String class isBlank() method) the method will throw an
	 * IllegalArgumentException (with any message) and perform no processing.
	 * 
	 * @param comments
	 * @return true if comments added; false otherwise
	 */
	public boolean addComments(String comments) {

		// checks if the comment is null, or is blank if true throws an exception
		if(comments.isBlank() || comments == null) {
			
			throw new IllegalArgumentException ("Inappropriate Comment");
			
		} else {
			
			this.comments.add(comments);
			return true;
			
		}
		
	}

	/**
	 * Returns copy so changes to the copy does not affect the original. Your
	 * implementation must be efficient (avoid any unnecessary copies).
	 * 
	 * @return ArrayList of strings
	 */
	public ArrayList<String> getComments() {

		ArrayList<String> newComments = new ArrayList<String> (); // new list
		
		for(String y : comments) {
			
			newComments.add(y); // adding the comments
			
		}
		
		return newComments;
	}

	/**
	 * Videos will be compared using title. If we were to sort an ArrayList of
	 * Videos, they will appear in lexicographical (alphabetical) order (e.g, "A",
	 * "B", "C").
	 * 
	 * @return negative, 0, or positive value
	 */
	public int compareTo(Video video) {

		return this.title.compareTo(video.title); // compare the object's title with the paramter
	
	}

	/**
	 * Two Video objects are considered equal if they have the same title. Implement
	 * the method using the instanceof operator rather than using getClass().
	 * 
	 * @return true if objects are considered equal; false otherwise
	 */
	@Override
	public boolean equals(Object obj) {

		if (obj == this) {
			
			return true;
		
		} else if (!(obj instanceof Video)) {
		
			return false;
		
		} else {
		
			return compareTo((Video) obj) == 0;	
		}
		
	}
	
}
